Description: >
  Create ECS Service for Blue/Green Deployment on ECS. For further reference, please review BluegreenRepo ==> https://github.com/awslabs/ecs-blue-green-deployment

Parameters:
  DesiredCount:
    Type: Number
    Default: 0

  VpcId:
    Type: AWS::EC2::VPC::Id

  Cluster:
    Type: String

  LoadBalancer:
    Type: String

  Repository:
    Type: String

  Tag:
    Type: String
    Default: latest

  Port:
    Type: Number

  Identifier:
    Type: String

  IsProduction:
    Type: String

  EcsDiscoveryService:
    Type: String
    
  EcsDiscoveryServiceAPI:
    Type: String

Resources:

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref Port
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref Port
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /query.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Identifier
          Value: !Ref Identifier
        - Key: Image
          Value: !Ref Tag
        - Key: IsProduction
          Value: !Ref IsProduction

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
          - "*"
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole


  APITaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com, ecs.amazonaws.com, ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'ecr:*','logs:PutLogEvents', 'dynammodb:*']
            Resource: '*'


  ### Create Log Groups

  ecsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub "logGroup-${AWS::StackName}"
        RetentionInDays: 7 # days
        
        
  ### Create ECS Service and Task Definition  - Web App     
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceRegistries:
           - RegistryArn: !Ref EcsDiscoveryService
             ContainerName: web-app
             ContainerPort: 80
      Cluster: !Ref Cluster
      #Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: web-app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #Family: !Sub ${AWS::StackName}-simple-app
      ContainerDefinitions:
        - Name: web-app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          LogConfiguration: # configures the logging driver
            LogDriver: awslogs # use logging driver awslogs to forward log messages to CloudWatch Logs 
            Options:
                'awslogs-region': !Ref 'AWS::Region' # the AWS region
                'awslogs-group':  !Ref ecsLogGroup  # the log group to send log messages to
                'awslogs-stream-prefix': "PHP-Web-Container" # a prefix for the log stream
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
          Memory: 128
          MountPoints:
            - SourceVolume: my-vol
              ContainerPath: /var/www/my-vol
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: Tag
              Value: !Ref Tag
        - Name: busybox
          Image: busybox
          EntryPoint:
            - sh
            - -c
          Essential: false
          Memory: 128
          VolumesFrom:
            - SourceContainer: web-app
          Command:
            - /bin/sh -c "while true; do /bin/date > /var/www/my-vol/date; sleep 1; done"
          VolumesFrom:
            - SourceContainer: web-app
      Volumes:
        - Name: my-vol

 ### Create ECS Service and Task Definition  - API Server   
  ServiceAPI:
    Type: AWS::ECS::Service
    Properties:
      ServiceRegistries:
           - RegistryArn: !Ref EcsDiscoveryServiceAPI
             ContainerName: api-app
             ContainerPort: 5000
      Cluster: !Ref Cluster
      #Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinitionAPI


  TaskDefinitionAPI:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #Family: !Sub ${AWS::StackName}-simple-app
      TaskRoleArn: !GetAtt APITaskRole.Arn
      ContainerDefinitions:
        - Name: api-app
          Image: 841659691615.dkr.ecr.eu-west-1.amazonaws.com/api-final:latest
          LogConfiguration: # configures the logging driver
            LogDriver: awslogs # use logging driver awslogs to forward log messages to CloudWatch Logs 
            Options:
                'awslogs-region': !Ref 'AWS::Region' # the AWS region
                'awslogs-group':  !Ref ecsLogGroup  # the log group to send log messages to
                'awslogs-stream-prefix': "flask-api-Container" # a prefix for the log stream
          Essential: true
          Memory: 128
          PortMappings:
            - ContainerPort: 5000
      Volumes:
        - Name: my-vol
